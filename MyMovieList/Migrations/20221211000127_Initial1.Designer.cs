// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyMovieList.Controllers.data;

#nullable disable

namespace MyMovieList.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221211000127_Initial1")]
    partial class Initial1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyMovieList.Controllers.data.enums.genre", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<int?>("movieId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("movieId");

                    b.ToTable("genre");
                });

            modelBuilder.Entity("MyMovieList.Models.MovieWatched", b =>
                {
                    b.Property<string>("userEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("movieId")
                        .HasColumnType("int");

                    b.Property<bool>("favourite")
                        .HasColumnType("bit");

                    b.Property<int>("score")
                        .HasColumnType("int");

                    b.Property<bool>("watched")
                        .HasColumnType("bit");

                    b.HasKey("userEmail", "movieId");

                    b.HasIndex("movieId");

                    b.ToTable("Movies_Watched");
                });

            modelBuilder.Entity("MyMovieList.Models.actor", b =>
                {
                    b.Property<int>("actorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("actorId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("actorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("photoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("actorId");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("MyMovieList.Models.actor_movies", b =>
                {
                    b.Property<int>("actorId")
                        .HasColumnType("int");

                    b.Property<int>("movieId")
                        .HasColumnType("int");

                    b.HasKey("actorId", "movieId");

                    b.HasIndex("movieId");

                    b.ToTable("Actors_Movies");
                });

            modelBuilder.Entity("MyMovieList.Models.movie", b =>
                {
                    b.Property<int>("movieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("movieId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("movieName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("movieScore")
                        .HasColumnType("real");

                    b.HasKey("movieId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MyMovieList.Models.users", b =>
                {
                    b.Property<string>("userEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userEmail");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MyMovieList.Controllers.data.enums.genre", b =>
                {
                    b.HasOne("MyMovieList.Models.movie", null)
                        .WithMany("genres")
                        .HasForeignKey("movieId");
                });

            modelBuilder.Entity("MyMovieList.Models.MovieWatched", b =>
                {
                    b.HasOne("MyMovieList.Models.movie", "Movie")
                        .WithMany("Movies_Watched")
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyMovieList.Models.users", "Users")
                        .WithMany("Movies_Watched")
                        .HasForeignKey("userEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MyMovieList.Models.actor_movies", b =>
                {
                    b.HasOne("MyMovieList.Models.actor", "Actor")
                        .WithMany("Actors_Movies")
                        .HasForeignKey("actorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyMovieList.Models.movie", "Movie")
                        .WithMany("Actors_Movies")
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MyMovieList.Models.actor", b =>
                {
                    b.Navigation("Actors_Movies");
                });

            modelBuilder.Entity("MyMovieList.Models.movie", b =>
                {
                    b.Navigation("Actors_Movies");

                    b.Navigation("Movies_Watched");

                    b.Navigation("genres");
                });

            modelBuilder.Entity("MyMovieList.Models.users", b =>
                {
                    b.Navigation("Movies_Watched");
                });
#pragma warning restore 612, 618
        }
    }
}
